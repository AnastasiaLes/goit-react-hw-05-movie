{"version":3,"file":"static/js/movies-search-page.9bd4c690.chunk.js","mappings":"6OAEaA,E,OAAkBC,EAAAA,IAAH,yE,SCuE5B,MAnEA,WACI,OAA4BC,EAAAA,EAAAA,MAAnBC,GAAT,eACMC,EAAe,IAAIC,IAAIC,SAASC,UAAWC,aAAaC,IAAI,SAC5DF,GAAWG,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAASP,GAAe,IAAlD,eAAOQ,EAAP,KAAcC,EAAd,KACA,GAAqCF,EAAAA,EAAAA,UAAS,IAA9C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,IAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAwBA,OAXAC,EAAAA,EAAAA,YAAU,WACNN,IACIO,EAAAA,EAAAA,IAAWP,GAAOQ,MAAK,SAACC,GACpBJ,EAAWI,EAAKL,cAKzB,CAACJ,KAIA,UAACZ,EAAD,YACI,kBAAMsB,SApBG,SAACC,GAEdA,EAAMC,iBACNX,EAASC,GACTX,EAAgB,SAAD,OAAUW,KAgBrB,WACI,kBAAOW,KAAK,QAAQC,YAAatB,GAAe,aAAcuB,QAzBpD,SAACJ,GACnBR,EAAeQ,EAAMK,cAAcC,WAyB3B,mBAAQJ,KAAK,SAAb,wBAOJ,2BACsB,IAAjBb,EAAMkB,SAAgB,sDAEtBd,EAAQc,OAAS,GACdd,EAAQe,KAAI,SAAAC,GAAI,OACZ,yBACI,SAAC,KAAD,CAAMC,GAAI,CACNC,SAAS,kCAAD,OAAoCF,EAAKG,IACjDC,OAAO,SAAD,OAAWxB,GACjByB,MAAO,CAAEC,KAAM/B,IAHnB,SAKGyB,EAAKO,SANHP,EAAKG,OASD,IAAnBnB,EAAQc,QAAiC,IAAjBlB,EAAMkB,SAC5B,kDAKR,SAAC,KAAD,S,oJCnEZ,IAAMU,EAAU,mCACVC,EAAW,+BAIV,SAASC,IACZ,IAAMrC,EAAG,UAAMoC,EAAN,uCAA6CD,GACtD,OACAG,MAAMtC,GACDe,MAAK,SAAAwB,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAOP,SAASC,EAAWC,GACvB,IAAM9C,EAAG,UAAMoC,EAAN,kBAAwBU,EAAxB,oBAA2CX,GACpD,OACAG,MAAMtC,GACDe,MAAK,SAAAwB,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAOP,SAASG,EAAUD,GACtB,IAAM9C,EAAG,UAAMoC,EAAN,kBAAwBU,EAAxB,4BAAmDX,GAC5D,OACAG,MAAMtC,GACDe,MAAK,SAAAwB,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAOP,SAASI,EAAaF,GACzB,IAAM9C,EAAG,UAAMoC,EAAN,kBAAwBU,EAAxB,4BAAmDX,GAC5D,OACAG,MAAMtC,GACDe,MAAK,SAAAwB,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAOP,SAAS9B,EAAWP,GACvB,IAAMP,EAAG,UAAMoC,EAAN,iCAAuCD,EAAvC,kBAAwD5B,GACjE,OACI+B,MAAMtC,GACDe,MAAK,SAAAwB,GACF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACX,IAAIC,MAAJ","sources":["Views/MoviesView/MovieSearch.styled.js","Views/MoviesView/MoviesSearchView.jsx","services/api.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const MovieSearchWrap = styled.div`\npadding: 16px;\n/* outline: solid 1px black; */\n`;","import { useEffect, useState } from \"react\";\nimport { Outlet, Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport { fetchQuery } from \"services/api.jsx\";\nimport { MovieSearchWrap } from \"./MovieSearch.styled\";\n\n\nfunction MoviesSearch() {\n    const [, setSearchParams] = useSearchParams();\n    const searchQuery = (new URL(document.location)).searchParams.get('query');\n    const location = useLocation();\n    const [query, setQuery] = useState(searchQuery || '');\n    const [inputCange, setInputChange] = useState('');\n    const [results, setResults] = useState([]);\n\n    const onInputChange = (event) => {\n        setInputChange(event.currentTarget.value);\n    }\n\n    const onSubmit = (event) => {\n        \n        event.preventDefault()\n        setQuery(inputCange)\n        setSearchParams(`query=${inputCange}`)\n    }\n\n    useEffect(() => {\n        query && \n            fetchQuery(query).then((data) => {\n                setResults(data.results)\n                \n                // console.log(location);\n            })\n        \n    }, [query])\n\n\n    return (\n        <MovieSearchWrap>\n            <form onSubmit={onSubmit}>\n                <input type=\"input\" placeholder={searchQuery || 'Find movie'} onInput={onInputChange} />\n                <button type=\"submit\" >Search</button>\n            </form>\n            \n            {/* <Routes>\n                <Route to={{pathname: '/goit-react-hw-05-movie/movies/query'}}\n                     element={<SearchResults results={results} query={searchParams} />}></Route>\n            </Routes> */}\n            <div>\n                {query.length === 0 && <p>Enter what you are looking</p>\n                }\n                {results.length > 0 &&\n                    results.map(film =>\n                        <li key={film.id}>\n                            <Link to={{\n                                pathname: `/goit-react-hw-05-movie/movies/${film.id}`,\n                                search: `query=${query}`,\n                                state: { from: location },\n                            }\n                            }>{film.title}</Link>\n                        </li>)\n                }\n                {(results.length === 0 && query.length !== 0) &&\n                    <h2>Nothing was found</h2>\n                \n                }\n                 \n            </div>\n            <Outlet />\n            \n        </MovieSearchWrap>\n    );\n}\n\nexport default MoviesSearch;","const API_KEY = '92e9d2ddc265e58dd6d39fa8f044cca9';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\n\n\nexport function fetchTrending() {\n    const URL = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`)\n            );\n            } \n        ) \n    )\n};\n\nexport function fetchMovie(movieId) {\n    const URL = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n            } \n        ) \n    )\n};\n\nexport function fetchCast(movieId) {\n    const URL = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n            } \n        ) \n    )\n};\n\nexport function fetchReviews(movieId) {\n    const URL = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n            } \n        ) \n    )\n};\n\nexport function fetchQuery(query) {\n    const URL = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    return (\n        fetch(URL)\n            .then(response => {\n                if (response.ok) {\n                    return response.json()\n                }\n                return Promise.reject(\n                    new Error(`Something weent wrong!`),\n                );\n            }\n        )\n    )\n};"],"names":["MovieSearchWrap","styled","useSearchParams","setSearchParams","searchQuery","URL","document","location","searchParams","get","useLocation","useState","query","setQuery","inputCange","setInputChange","results","setResults","useEffect","fetchQuery","then","data","onSubmit","event","preventDefault","type","placeholder","onInput","currentTarget","value","length","map","film","to","pathname","id","search","state","from","title","API_KEY","BASE_URL","fetchTrending","fetch","response","ok","json","Promise","reject","Error","fetchMovie","movieId","fetchCast","fetchReviews"],"sourceRoot":""}