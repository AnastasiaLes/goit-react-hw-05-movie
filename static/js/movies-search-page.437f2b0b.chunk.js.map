{"version":3,"file":"static/js/movies-search-page.437f2b0b.chunk.js","mappings":"qQACA,IAAMA,EAAU,mCACVC,EAAW,+BAEV,SAASC,IACZ,IAAMC,EAAG,UAAMF,EAAN,uCAA6CD,GACtD,OACAI,MAAMD,GACDE,MAAK,SAAAC,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAQP,SAASC,EAAWC,GACvB,IAAMV,EAAG,UAAMF,EAAN,kBAAwBY,EAAxB,oBAA2Cb,GACpD,OACAI,MAAMD,GACDE,MAAK,SAAAC,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAOP,SAASG,EAAUD,GACtB,IAAMV,EAAG,UAAMF,EAAN,kBAAwBY,EAAxB,4BAAmDb,GAC5D,OACAI,MAAMD,GACDE,MAAK,SAAAC,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAOP,SAASI,EAAaF,GACzB,IAAMV,EAAG,UAAMF,EAAN,kBAAwBY,EAAxB,4BAAmDb,GAC5D,OACAI,MAAMD,GACDE,MAAK,SAAAC,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAOP,SAASK,EAAWC,GACvB,IAAMd,EAAG,UAAMF,EAAN,iCAAuCD,EAAvC,kBAAwDiB,GACjE,OACAb,MAAMD,GACDE,MAAK,SAAAC,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,gC,6HCjFDO,E,OAAkBC,EAAAA,IAAH,yE,SCyE5B,MArEA,WACI,OAA4BC,EAAAA,EAAAA,MAAnBC,GAAT,eACMC,EAAe,IAAInB,IAAIoB,SAASC,UAAWC,aAAaC,IAAI,SAC5DF,GAAWG,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAASN,GAAe,IAAlD,eAAOL,EAAP,KAAcY,EAAd,KACA,GAAqCD,EAAAA,EAAAA,UAAS,IAA9C,eAAOE,EAAP,KAAmBC,EAAnB,KACA,GAA8BH,EAAAA,EAAAA,UAAS,IAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KA2BA,OAXAC,EAAAA,EAAAA,YAAU,WACNjB,IACID,EAAAA,EAAAA,IAAWC,GAAOZ,MAAK,SAAC8B,GACpBF,EAAWE,EAAKH,cAKzB,CAACf,KAIA,UAACC,EAAD,YACQ,kBAAMkB,SApBD,SAACC,GAEdA,EAAMC,iBACNT,EAASC,GACTT,EAAgB,SAAD,OAAUS,KAgBjB,WACI,kBAAOS,KAAK,QAAQC,YAAalB,GAAe,aAAcmB,QAzBxD,SAACJ,GACnBN,EAAeM,EAAMK,cAAcC,WAyBvB,mBAAQJ,KAAK,SAAb,wBAOJ,2BACoB,IAAjBtB,EAAM2B,SAAgB,sDAExBZ,EAAQY,OAAS,GACdZ,EAAQa,KAAI,SAAAC,GAAI,OAChB,yBACQ,SAAC,KAAD,CAAMC,GAAI,CACNC,SAAS,kCAAD,OAAoCF,EAAKG,IACjDC,OAAO,SAAD,OAAWjC,GACjBkC,MAAO,CAACC,KAAM5B,IAHlB,SAKOsB,EAAKO,SANXP,EAAKG,OASG,IAAnBjB,EAAQY,QAAiC,IAAjB3B,EAAM2B,SAC5B,kDAKR,SAAC,KAAD","sources":["Services/API.js","Views/MoviesView/MovieSearch.styled.js","Views/MoviesView/MoviesSearchView.jsx"],"sourcesContent":["\nconst API_KEY = '92e9d2ddc265e58dd6d39fa8f044cca9';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport function Fetch() {\n    const URL = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n} \n        ) \n)\n    \n};\n\nexport function FetchMovie(movieId) {\n    const URL = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n} \n        ) \n)\n}\n\nexport function FetchCast(movieId) {\n    const URL = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n} \n        ) \n)\n}\n\nexport function FetchReviews(movieId) {\n    const URL = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n            } \n        ) \n    )\n}\n\nexport function FetchQuery(query) {\n    const URL = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n            } \n        ) \n    )\n}","import styled from \"@emotion/styled\";\n\nexport const MovieSearchWrap = styled.div`\npadding: 16px;\n/* outline: solid 1px black; */\n`;","import { useEffect, useState } from \"react\";\nimport { Outlet, Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport { FetchQuery } from \"Services/API\";\nimport { MovieSearchWrap } from \"./MovieSearch.styled\";\n\n\nfunction MoviesSearch() {\n    const [, setSearchParams] = useSearchParams();\n    const searchQuery = (new URL(document.location)).searchParams.get('query');\n    const location = useLocation();\n    const [query, setQuery] = useState(searchQuery || '');\n    const [inputCange, setInputChange] = useState('');\n    const [results, setResults] = useState([]);\n    \n \n    \n\n    const onInputChange = (event) => {\n        setInputChange(event.currentTarget.value);\n    }\n\n    const onSubmit = (event) => {\n        \n        event.preventDefault()\n        setQuery(inputCange)\n        setSearchParams(`query=${inputCange}`)\n    }\n\n    useEffect(() => {\n        query && \n            FetchQuery(query).then((data) => {\n                setResults(data.results)\n                \n                // console.log(searchQuery);\n            })\n        \n    }, [query])\n\n\n    return (\n        <MovieSearchWrap>\n                <form onSubmit={onSubmit}>\n                    <input type=\"input\" placeholder={searchQuery || 'Find movie'} onInput={onInputChange} />\n                    <button type=\"submit\" >Search</button>\n            </form>\n            \n            {/* <Routes>\n                <Route to={{pathname: '/goit-react-hw-05-movie/movies/query'}}\n                     element={<SearchResults results={results} query={searchParams} />}></Route>\n            </Routes> */}\n                <div>\n                 { query.length === 0 && <p>Enter what you are looking</p>\n                }\n                {results.length > 0 && \n                    results.map(film =>\n                    <li key={film.id}>\n                            <Link to={{\n                                pathname: `/goit-react-hw-05-movie/movies/${film.id}`,\n                                search: `query=${query}`,\n                                state: {from: location}\n                            }\n                                }>{film.title}</Link>\n                    </li>)\n                }\n                {(results.length === 0 && query.length !== 0) &&\n                    <h2>Nothing was found</h2>\n                \n                }\n                 \n            </div> \n            <Outlet />   \n            \n        </MovieSearchWrap>   \n)}\n\nexport default MoviesSearch;"],"names":["API_KEY","BASE_URL","Fetch","URL","fetch","then","response","ok","json","Promise","reject","Error","FetchMovie","movieId","FetchCast","FetchReviews","FetchQuery","query","MovieSearchWrap","styled","useSearchParams","setSearchParams","searchQuery","document","location","searchParams","get","useLocation","useState","setQuery","inputCange","setInputChange","results","setResults","useEffect","data","onSubmit","event","preventDefault","type","placeholder","onInput","currentTarget","value","length","map","film","to","pathname","id","search","state","from","title"],"sourceRoot":""}