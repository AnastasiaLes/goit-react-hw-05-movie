{"version":3,"file":"static/js/caast.c2c3c567.chunk.js","mappings":"qQACA,IAAMA,EAAU,mCACVC,EAAW,+BAEV,SAASC,IACZ,IAAMC,EAAG,UAAMF,EAAN,uCAA6CD,GACtD,OACAI,MAAMD,GACDE,MAAK,SAAAC,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAQP,SAASC,EAAWC,GACvB,IAAMV,EAAG,UAAMF,EAAN,kBAAwBY,EAAxB,oBAA2Cb,GACpD,OACAI,MAAMD,GACDE,MAAK,SAAAC,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAOP,SAASG,EAAUD,GACtB,IAAMV,EAAG,UAAMF,EAAN,kBAAwBY,EAAxB,4BAAmDb,GAC5D,OACAI,MAAMD,GACDE,MAAK,SAAAC,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAOP,SAASI,EAAaF,GACzB,IAAMV,EAAG,UAAMF,EAAN,kBAAwBY,EAAxB,4BAAmDb,GAC5D,OACAI,MAAMD,GACDE,MAAK,SAAAC,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,8BAOP,SAASK,EAAWC,GACvB,IAAMd,EAAG,UAAMF,EAAN,iCAAuCD,EAAvC,kBAAwDiB,GACjE,OACAb,MAAMD,GACDE,MAAK,SAAAC,GAEF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,OACb,IAAIC,MAAJ,gC,4ECrDd,UAzBA,WACI,IAAOO,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KASA,OAPAC,EAAAA,EAAAA,YAAU,YACNT,EAAAA,EAAAA,IAAUI,GAASb,MAAK,SAAAmB,GACpBF,EAAQE,EAAKH,SAEdI,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,UAAWF,QAC1C,CAACR,KAGA,wBACKG,GAAQA,EAAKQ,KAAI,SAAAC,GAClB,IAAM3B,EAAG,8CAA0C2B,EAAMC,cACzD,OACI,2BACI,gBAAKC,IAAK7B,EAAK8B,IAAKH,EAAMI,KAAMC,MAAM,SACtC,yBAAIL,EAAMI,KAAV,QACA,uCAAeJ,EAAMM,UAArB,SAHSN,EAAMO","sources":["Services/API.js","Views/MovieDetailsView/CastView.jsx"],"sourcesContent":["\nconst API_KEY = '92e9d2ddc265e58dd6d39fa8f044cca9';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport function Fetch() {\n    const URL = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n} \n        ) \n)\n    \n};\n\nexport function FetchMovie(movieId) {\n    const URL = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n} \n        ) \n)\n}\n\nexport function FetchCast(movieId) {\n    const URL = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n} \n        ) \n)\n}\n\nexport function FetchReviews(movieId) {\n    const URL = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n            } \n        ) \n    )\n}\n\nexport function FetchQuery(query) {\n    const URL = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    return (\n    fetch(URL)\n        .then(response => \n            {\n            if (response.ok) {\n                return response.json()\n            }\n            return Promise.reject(\n              new Error(`Something weent wrong!`),\n            );\n            } \n        ) \n    )\n}","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { FetchCast } from \"Services/API\";\n\n\nfunction Cast() {\n    const {MovieId} = useParams();\n    const [cast, setCast] = useState(null);\n    // const location = useLocation();\n    useEffect(() => {\n        FetchCast(MovieId).then(data => {\n            setCast(data.cast);\n            // console.log(location);\n        }).catch(error => console.log('Error: ', error));\n    }, [MovieId]);\n\n    return (\n        <ul>\n            {cast && cast.map(actor => {\n            const URL = `https://image.tmdb.org/t/p/original/${actor.profile_path}`\n            return (\n                < li key = { actor.id } >\n                    <img src={URL} alt={actor.name} width=\"100\" />\n                    <p>{actor.name} </p>\n                    <p>Character: {actor.character} </p>\n                </li>\n            )})}  \n        </ul>\n    )\n}\nexport default Cast;"],"names":["API_KEY","BASE_URL","Fetch","URL","fetch","then","response","ok","json","Promise","reject","Error","FetchMovie","movieId","FetchCast","FetchReviews","FetchQuery","query","MovieId","useParams","useState","cast","setCast","useEffect","data","catch","error","console","log","map","actor","profile_path","src","alt","name","width","character","id"],"sourceRoot":""}